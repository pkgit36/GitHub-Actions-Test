#A matrix strategy lets you use variables in a single job definition to automatically create multiple job runs 
#that are based on the combinations of the variables. In below case, helloworld, alpine images should be deploy on all the array
#of OS , so , instead of creating multiple steps for each task, we used the matrix strategy. This also has exclude and include options
# for advanced uses. max-parallel indicates the number of jobs should be executed parallely and setting fail-fast to true
#tells gihub actions to not to consider the whole workflow as failed if single job fails and timeout tells actions to terminates 
#worflow if it exceeds the specific timeout minutes.  

name: Matrix-test
on:
    workflow_dispatch: 
jobs:
    deploy:
        timeout-minutes: 2
        strategy:
            max-parallel: 3
            fail-fast: false
            matrix:
                os: [ubuntu-latest,ubuntu-20.04,windows-latest]
                images: [hello-world,alpine]
                exclude:
                    - os: windows-latest
                      images: alpine
                include: 
                    - os: ubuntu-22.04
                      images: busybox
        runs-on: ${{ matrix.os }}
        steps:
            - name: Get the docker-info
              run: docker info
            - name: Run the images on ${{ matrix.os }}
              run: docker run ${{ matrix.images }}

              


            
